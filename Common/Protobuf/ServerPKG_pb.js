/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var MessageID_pb = require('./MessageID_pb.js');
var LobbyMessage_pb = require('./LobbyMessage_pb.js');
goog.exportSymbol('proto.ServerPKG.GameRoomInfo', null, global);
goog.exportSymbol('proto.ServerPKG.NotifyUserJoinGame', null, global);
goog.exportSymbol('proto.ServerPKG.ServerState', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerPKG.ServerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerPKG.ServerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerPKG.ServerState.displayName = 'proto.ServerPKG.ServerState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerPKG.ServerState.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerPKG.ServerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerPKG.ServerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerPKG.ServerState.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    servertype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    usercount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxuser: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerPKG.ServerState}
 */
proto.ServerPKG.ServerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerPKG.ServerState;
  return proto.ServerPKG.ServerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerPKG.ServerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerPKG.ServerState}
 */
proto.ServerPKG.ServerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerip(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {!proto.ServerType} */ (reader.readEnum());
      msg.setServertype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUsercount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxuser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerPKG.ServerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerPKG.ServerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerPKG.ServerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerPKG.ServerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getServertype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getUsercount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMaxuser();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string ServerID = 1;
 * @return {string}
 */
proto.ServerPKG.ServerState.prototype.getServerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ServerPKG.ServerState.prototype.setServerid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ServerIP = 2;
 * @return {string}
 */
proto.ServerPKG.ServerState.prototype.getServerip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ServerPKG.ServerState.prototype.setServerip = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 Port = 3;
 * @return {number}
 */
proto.ServerPKG.ServerState.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ServerPKG.ServerState.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ServerType ServerType = 4;
 * @return {!proto.ServerType}
 */
proto.ServerPKG.ServerState.prototype.getServertype = function() {
  return /** @type {!proto.ServerType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.ServerType} value */
proto.ServerPKG.ServerState.prototype.setServertype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 UserCount = 5;
 * @return {number}
 */
proto.ServerPKG.ServerState.prototype.getUsercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ServerPKG.ServerState.prototype.setUsercount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 MaxUser = 6;
 * @return {number}
 */
proto.ServerPKG.ServerState.prototype.getMaxuser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ServerPKG.ServerState.prototype.setMaxuser = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerPKG.GameRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerPKG.GameRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerPKG.GameRoomInfo.displayName = 'proto.ServerPKG.GameRoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerPKG.GameRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerPKG.GameRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerPKG.GameRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerPKG.GameRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minscore: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxscore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    percentage: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    serverid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerPKG.GameRoomInfo}
 */
proto.ServerPKG.GameRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerPKG.GameRoomInfo;
  return proto.ServerPKG.GameRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerPKG.GameRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerPKG.GameRoomInfo}
 */
proto.ServerPKG.GameRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinscore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxscore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerPKG.GameRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerPKG.GameRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerPKG.GameRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerPKG.GameRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGamename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinscore();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMaxscore();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getServerid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 GameID = 1;
 * @return {number}
 */
proto.ServerPKG.GameRoomInfo.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ServerPKG.GameRoomInfo.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string GameName = 2;
 * @return {string}
 */
proto.ServerPKG.GameRoomInfo.prototype.getGamename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ServerPKG.GameRoomInfo.prototype.setGamename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 MinScore = 3;
 * @return {number}
 */
proto.ServerPKG.GameRoomInfo.prototype.getMinscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ServerPKG.GameRoomInfo.prototype.setMinscore = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 MaxScore = 4;
 * @return {number}
 */
proto.ServerPKG.GameRoomInfo.prototype.getMaxscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ServerPKG.GameRoomInfo.prototype.setMaxscore = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float Percentage = 5;
 * @return {number}
 */
proto.ServerPKG.GameRoomInfo.prototype.getPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.ServerPKG.GameRoomInfo.prototype.setPercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string ServerID = 6;
 * @return {string}
 */
proto.ServerPKG.GameRoomInfo.prototype.getServerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ServerPKG.GameRoomInfo.prototype.setServerid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerPKG.NotifyUserJoinGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerPKG.NotifyUserJoinGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerPKG.NotifyUserJoinGame.displayName = 'proto.ServerPKG.NotifyUserJoinGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerPKG.NotifyUserJoinGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerPKG.NotifyUserJoinGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerPKG.NotifyUserJoinGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playerinfo: (f = msg.getPlayerinfo()) && LobbyMessage_pb.AccountInfo.toObject(includeInstance, f),
    lobbyserverid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gateserverid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gameserverid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    gameid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerPKG.NotifyUserJoinGame}
 */
proto.ServerPKG.NotifyUserJoinGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerPKG.NotifyUserJoinGame;
  return proto.ServerPKG.NotifyUserJoinGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerPKG.NotifyUserJoinGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerPKG.NotifyUserJoinGame}
 */
proto.ServerPKG.NotifyUserJoinGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 2:
      var value = new LobbyMessage_pb.AccountInfo;
      reader.readMessage(value,LobbyMessage_pb.AccountInfo.deserializeBinaryFromReader);
      msg.setPlayerinfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLobbyserverid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateserverid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameserverid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGameid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerPKG.NotifyUserJoinGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerPKG.NotifyUserJoinGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerPKG.NotifyUserJoinGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPlayerinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      LobbyMessage_pb.AccountInfo.serializeBinaryToWriter
    );
  }
  f = message.getLobbyserverid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGateserverid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGameserverid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint64 UserID = 1;
 * @return {number}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ServerPKG.NotifyUserJoinGame.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ClientPKG.AccountInfo PlayerInfo = 2;
 * @return {?proto.ClientPKG.AccountInfo}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.getPlayerinfo = function() {
  return /** @type{?proto.ClientPKG.AccountInfo} */ (
    jspb.Message.getWrapperField(this, LobbyMessage_pb.AccountInfo, 2));
};


/** @param {?proto.ClientPKG.AccountInfo|undefined} value */
proto.ServerPKG.NotifyUserJoinGame.prototype.setPlayerinfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ServerPKG.NotifyUserJoinGame.prototype.clearPlayerinfo = function() {
  this.setPlayerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.hasPlayerinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string LobbyServerID = 3;
 * @return {string}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.getLobbyserverid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ServerPKG.NotifyUserJoinGame.prototype.setLobbyserverid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string GateServerID = 4;
 * @return {string}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.getGateserverid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ServerPKG.NotifyUserJoinGame.prototype.setGateserverid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string GameServerID = 5;
 * @return {string}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.getGameserverid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ServerPKG.NotifyUserJoinGame.prototype.setGameserverid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 GameID = 6;
 * @return {number}
 */
proto.ServerPKG.NotifyUserJoinGame.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ServerPKG.NotifyUserJoinGame.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, proto.ServerPKG);
