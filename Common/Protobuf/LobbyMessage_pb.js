/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var MessageID_pb = require('./MessageID_pb.js');
goog.exportSymbol('proto.ClientPKG.AccountInfo', null, global);
goog.exportSymbol('proto.ClientPKG.CreateGame', null, global);
goog.exportSymbol('proto.ClientPKG.GameError', null, global);
goog.exportSymbol('proto.ClientPKG.GameRoomInfo', null, global);
goog.exportSymbol('proto.ClientPKG.GameUserInfo', null, global);
goog.exportSymbol('proto.ClientPKG.GameVersion', null, global);
goog.exportSymbol('proto.ClientPKG.GateServerInfo', null, global);
goog.exportSymbol('proto.ClientPKG.GateServerList', null, global);
goog.exportSymbol('proto.ClientPKG.JoinGame', null, global);
goog.exportSymbol('proto.ClientPKG.LoginGame', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.GameVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.GameVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.GameVersion.displayName = 'proto.ClientPKG.GameVersion';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.GameVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.GameVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.GameVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.GameVersion}
 */
proto.ClientPKG.GameVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.GameVersion;
  return proto.ClientPKG.GameVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.GameVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.GameVersion}
 */
proto.ClientPKG.GameVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.GameVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.GameVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.GameVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 Version = 1;
 * @return {number}
 */
proto.ClientPKG.GameVersion.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientPKG.GameVersion.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.GateServerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.GateServerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.GateServerInfo.displayName = 'proto.ClientPKG.GateServerInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.GateServerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.GateServerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.GateServerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GateServerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serverport: jspb.Message.getFieldWithDefault(msg, 3, 0),
    serverload: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.GateServerInfo}
 */
proto.ClientPKG.GateServerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.GateServerInfo;
  return proto.ClientPKG.GateServerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.GateServerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.GateServerInfo}
 */
proto.ClientPKG.GateServerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerip(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerport(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setServerload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.GateServerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.GateServerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.GateServerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GateServerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServerport();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getServerload();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string ServerID = 1;
 * @return {string}
 */
proto.ClientPKG.GateServerInfo.prototype.getServerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ClientPKG.GateServerInfo.prototype.setServerid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ServerIP = 2;
 * @return {string}
 */
proto.ClientPKG.GateServerInfo.prototype.getServerip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.GateServerInfo.prototype.setServerip = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 ServerPort = 3;
 * @return {number}
 */
proto.ClientPKG.GateServerInfo.prototype.getServerport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientPKG.GateServerInfo.prototype.setServerport = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float ServerLoad = 4;
 * @return {number}
 */
proto.ClientPKG.GateServerInfo.prototype.getServerload = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.ClientPKG.GateServerInfo.prototype.setServerload = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.GateServerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientPKG.GateServerList.repeatedFields_, null);
};
goog.inherits(proto.ClientPKG.GateServerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.GateServerList.displayName = 'proto.ClientPKG.GateServerList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientPKG.GateServerList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.GateServerList.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.GateServerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.GateServerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GateServerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverlistList: jspb.Message.toObjectList(msg.getServerlistList(),
    proto.ClientPKG.GateServerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.GateServerList}
 */
proto.ClientPKG.GateServerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.GateServerList;
  return proto.ClientPKG.GateServerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.GateServerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.GateServerList}
 */
proto.ClientPKG.GateServerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ClientPKG.GateServerInfo;
      reader.readMessage(value,proto.ClientPKG.GateServerInfo.deserializeBinaryFromReader);
      msg.addServerlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.GateServerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.GateServerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.GateServerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GateServerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ClientPKG.GateServerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GateServerInfo ServerList = 1;
 * @return {!Array<!proto.ClientPKG.GateServerInfo>}
 */
proto.ClientPKG.GateServerList.prototype.getServerlistList = function() {
  return /** @type{!Array<!proto.ClientPKG.GateServerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ClientPKG.GateServerInfo, 1));
};


/** @param {!Array<!proto.ClientPKG.GateServerInfo>} value */
proto.ClientPKG.GateServerList.prototype.setServerlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ClientPKG.GateServerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientPKG.GateServerInfo}
 */
proto.ClientPKG.GateServerList.prototype.addServerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ClientPKG.GateServerInfo, opt_index);
};


proto.ClientPKG.GateServerList.prototype.clearServerlistList = function() {
  this.setServerlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.GameError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.GameError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.GameError.displayName = 'proto.ClientPKG.GameError';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.GameError.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.GameError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.GameError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameError.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorcode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorinfo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    devicecode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.GameError}
 */
proto.ClientPKG.GameError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.GameError;
  return proto.ClientPKG.GameError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.GameError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.GameError}
 */
proto.ClientPKG.GameError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.GameErrorCode} */ (reader.readEnum());
      msg.setErrorcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorinfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.GameError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.GameError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.GameError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorcode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrorinfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDevicecode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional GameErrorCode ErrorCode = 1;
 * @return {!proto.GameErrorCode}
 */
proto.ClientPKG.GameError.prototype.getErrorcode = function() {
  return /** @type {!proto.GameErrorCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.GameErrorCode} value */
proto.ClientPKG.GameError.prototype.setErrorcode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string ErrorInfo = 2;
 * @return {string}
 */
proto.ClientPKG.GameError.prototype.getErrorinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.GameError.prototype.setErrorinfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 UserID = 3;
 * @return {number}
 */
proto.ClientPKG.GameError.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientPKG.GameError.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string DeviceCode = 4;
 * @return {string}
 */
proto.ClientPKG.GameError.prototype.getDevicecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ClientPKG.GameError.prototype.setDevicecode = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.LoginGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.LoginGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.LoginGame.displayName = 'proto.ClientPKG.LoginGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.LoginGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.LoginGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.LoginGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.LoginGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    devicecode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    logintype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    clientip: jspb.Message.getFieldWithDefault(msg, 6, ""),
    port: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.LoginGame}
 */
proto.ClientPKG.LoginGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.LoginGame;
  return proto.ClientPKG.LoginGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.LoginGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.LoginGame}
 */
proto.ClientPKG.LoginGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicecode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogintype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientip(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.LoginGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.LoginGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.LoginGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.LoginGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDevicecode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLogintype();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getClientip();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int32 Version = 1;
 * @return {number}
 */
proto.ClientPKG.LoginGame.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientPKG.LoginGame.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string DeviceCode = 2;
 * @return {string}
 */
proto.ClientPKG.LoginGame.prototype.getDevicecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.LoginGame.prototype.setDevicecode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 LoginType = 3;
 * @return {number}
 */
proto.ClientPKG.LoginGame.prototype.getLogintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientPKG.LoginGame.prototype.setLogintype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string AccessToken = 4;
 * @return {string}
 */
proto.ClientPKG.LoginGame.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ClientPKG.LoginGame.prototype.setAccesstoken = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 UserID = 5;
 * @return {number}
 */
proto.ClientPKG.LoginGame.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ClientPKG.LoginGame.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string ClientIP = 6;
 * @return {string}
 */
proto.ClientPKG.LoginGame.prototype.getClientip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ClientPKG.LoginGame.prototype.setClientip = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 Port = 9;
 * @return {number}
 */
proto.ClientPKG.LoginGame.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ClientPKG.LoginGame.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.AccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.AccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.AccountInfo.displayName = 'proto.ClientPKG.AccountInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.AccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.AccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.AccountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.AccountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    devicecode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    username: jspb.Message.getFieldWithDefault(msg, 4, ""),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0),
    diamond: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.AccountInfo}
 */
proto.ClientPKG.AccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.AccountInfo;
  return proto.ClientPKG.AccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.AccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.AccountInfo}
 */
proto.ClientPKG.AccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicecode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setScore(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiamond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.AccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.AccountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.AccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.AccountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDevicecode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDiamond();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional uint64 UserID = 1;
 * @return {number}
 */
proto.ClientPKG.AccountInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientPKG.AccountInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string DeviceCode = 2;
 * @return {string}
 */
proto.ClientPKG.AccountInfo.prototype.getDevicecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.AccountInfo.prototype.setDevicecode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string AccessToken = 3;
 * @return {string}
 */
proto.ClientPKG.AccountInfo.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ClientPKG.AccountInfo.prototype.setAccesstoken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UserName = 4;
 * @return {string}
 */
proto.ClientPKG.AccountInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ClientPKG.AccountInfo.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 Score = 5;
 * @return {number}
 */
proto.ClientPKG.AccountInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ClientPKG.AccountInfo.prototype.setScore = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 Diamond = 6;
 * @return {number}
 */
proto.ClientPKG.AccountInfo.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ClientPKG.AccountInfo.prototype.setDiamond = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.JoinGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.JoinGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.JoinGame.displayName = 'proto.ClientPKG.JoinGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.JoinGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.JoinGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.JoinGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.JoinGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gameid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.JoinGame}
 */
proto.ClientPKG.JoinGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.JoinGame;
  return proto.ClientPKG.JoinGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.JoinGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.JoinGame}
 */
proto.ClientPKG.JoinGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGameid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.JoinGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.JoinGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.JoinGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.JoinGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 UserID = 1;
 * @return {number}
 */
proto.ClientPKG.JoinGame.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientPKG.JoinGame.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Token = 2;
 * @return {string}
 */
proto.ClientPKG.JoinGame.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.JoinGame.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 GameID = 3;
 * @return {number}
 */
proto.ClientPKG.JoinGame.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientPKG.JoinGame.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.CreateGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.CreateGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.CreateGame.displayName = 'proto.ClientPKG.CreateGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.CreateGame.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.CreateGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.CreateGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.CreateGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gamename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minscore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxscore: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pb_private: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.CreateGame}
 */
proto.ClientPKG.CreateGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.CreateGame;
  return proto.ClientPKG.CreateGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.CreateGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.CreateGame}
 */
proto.ClientPKG.CreateGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamename(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinscore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxscore(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.CreateGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.CreateGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.CreateGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.CreateGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGamename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinscore();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMaxscore();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getPrivate();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint64 UserID = 1;
 * @return {number}
 */
proto.ClientPKG.CreateGame.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientPKG.CreateGame.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Token = 2;
 * @return {string}
 */
proto.ClientPKG.CreateGame.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.CreateGame.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string GameName = 3;
 * @return {string}
 */
proto.ClientPKG.CreateGame.prototype.getGamename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ClientPKG.CreateGame.prototype.setGamename = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 MinScore = 4;
 * @return {number}
 */
proto.ClientPKG.CreateGame.prototype.getMinscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ClientPKG.CreateGame.prototype.setMinscore = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 MaxScore = 5;
 * @return {number}
 */
proto.ClientPKG.CreateGame.prototype.getMaxscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ClientPKG.CreateGame.prototype.setMaxscore = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool Private = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ClientPKG.CreateGame.prototype.getPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.ClientPKG.CreateGame.prototype.setPrivate = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.GameUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ClientPKG.GameUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.GameUserInfo.displayName = 'proto.ClientPKG.GameUserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.GameUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.GameUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.GameUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sitposition: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userscore: jspb.Message.getFieldWithDefault(msg, 4, 0),
    deskscore: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gamestate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    headurl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 8, ""),
    port: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.GameUserInfo}
 */
proto.ClientPKG.GameUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.GameUserInfo;
  return proto.ClientPKG.GameUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.GameUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.GameUserInfo}
 */
proto.ClientPKG.GameUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSitposition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserscore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeskscore(value);
      break;
    case 6:
      var value = /** @type {!proto.UserGameState} */ (reader.readEnum());
      msg.setGamestate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadurl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.GameUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.GameUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.GameUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSitposition();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUserscore();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDeskscore();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getGamestate();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getHeadurl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional uint64 UserID = 1;
 * @return {number}
 */
proto.ClientPKG.GameUserInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientPKG.GameUserInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string UserName = 2;
 * @return {string}
 */
proto.ClientPKG.GameUserInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.GameUserInfo.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 SitPosition = 3;
 * @return {number}
 */
proto.ClientPKG.GameUserInfo.prototype.getSitposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ClientPKG.GameUserInfo.prototype.setSitposition = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 UserScore = 4;
 * @return {number}
 */
proto.ClientPKG.GameUserInfo.prototype.getUserscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ClientPKG.GameUserInfo.prototype.setUserscore = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 DeskScore = 5;
 * @return {number}
 */
proto.ClientPKG.GameUserInfo.prototype.getDeskscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ClientPKG.GameUserInfo.prototype.setDeskscore = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional UserGameState GameState = 6;
 * @return {!proto.UserGameState}
 */
proto.ClientPKG.GameUserInfo.prototype.getGamestate = function() {
  return /** @type {!proto.UserGameState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.UserGameState} value */
proto.ClientPKG.GameUserInfo.prototype.setGamestate = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string HeadUrl = 7;
 * @return {string}
 */
proto.ClientPKG.GameUserInfo.prototype.getHeadurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ClientPKG.GameUserInfo.prototype.setHeadurl = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string IP = 8;
 * @return {string}
 */
proto.ClientPKG.GameUserInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ClientPKG.GameUserInfo.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 Port = 9;
 * @return {number}
 */
proto.ClientPKG.GameUserInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ClientPKG.GameUserInfo.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientPKG.GameRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ClientPKG.GameRoomInfo.repeatedFields_, null);
};
goog.inherits(proto.ClientPKG.GameRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientPKG.GameRoomInfo.displayName = 'proto.ClientPKG.GameRoomInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ClientPKG.GameRoomInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientPKG.GameRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientPKG.GameRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientPKG.GameRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userlistList: jspb.Message.toObjectList(msg.getUserlistList(),
    proto.ClientPKG.GameUserInfo.toObject, includeInstance),
    dpos: jspb.Message.getFieldWithDefault(msg, 4, 0),
    currentstate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minscore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxscore: jspb.Message.getFieldWithDefault(msg, 7, 0),
    percentage: +jspb.Message.getFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientPKG.GameRoomInfo}
 */
proto.ClientPKG.GameRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientPKG.GameRoomInfo;
  return proto.ClientPKG.GameRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientPKG.GameRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientPKG.GameRoomInfo}
 */
proto.ClientPKG.GameRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamename(value);
      break;
    case 3:
      var value = new proto.ClientPKG.GameUserInfo;
      reader.readMessage(value,proto.ClientPKG.GameUserInfo.deserializeBinaryFromReader);
      msg.addUserlist(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDpos(value);
      break;
    case 5:
      var value = /** @type {!proto.GameState} */ (reader.readEnum());
      msg.setCurrentstate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinscore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxscore(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientPKG.GameRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientPKG.GameRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientPKG.GameRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientPKG.GameRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGamename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ClientPKG.GameUserInfo.serializeBinaryToWriter
    );
  }
  f = message.getDpos();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCurrentstate();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMinscore();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMaxscore();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional uint64 GameID = 1;
 * @return {number}
 */
proto.ClientPKG.GameRoomInfo.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientPKG.GameRoomInfo.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string GameName = 2;
 * @return {string}
 */
proto.ClientPKG.GameRoomInfo.prototype.getGamename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ClientPKG.GameRoomInfo.prototype.setGamename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated GameUserInfo UserList = 3;
 * @return {!Array<!proto.ClientPKG.GameUserInfo>}
 */
proto.ClientPKG.GameRoomInfo.prototype.getUserlistList = function() {
  return /** @type{!Array<!proto.ClientPKG.GameUserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ClientPKG.GameUserInfo, 3));
};


/** @param {!Array<!proto.ClientPKG.GameUserInfo>} value */
proto.ClientPKG.GameRoomInfo.prototype.setUserlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ClientPKG.GameUserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ClientPKG.GameUserInfo}
 */
proto.ClientPKG.GameRoomInfo.prototype.addUserlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ClientPKG.GameUserInfo, opt_index);
};


proto.ClientPKG.GameRoomInfo.prototype.clearUserlistList = function() {
  this.setUserlistList([]);
};


/**
 * optional int32 DPos = 4;
 * @return {number}
 */
proto.ClientPKG.GameRoomInfo.prototype.getDpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ClientPKG.GameRoomInfo.prototype.setDpos = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional GameState CurrentState = 5;
 * @return {!proto.GameState}
 */
proto.ClientPKG.GameRoomInfo.prototype.getCurrentstate = function() {
  return /** @type {!proto.GameState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.GameState} value */
proto.ClientPKG.GameRoomInfo.prototype.setCurrentstate = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint64 MinScore = 6;
 * @return {number}
 */
proto.ClientPKG.GameRoomInfo.prototype.getMinscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ClientPKG.GameRoomInfo.prototype.setMinscore = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 MaxScore = 7;
 * @return {number}
 */
proto.ClientPKG.GameRoomInfo.prototype.getMaxscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ClientPKG.GameRoomInfo.prototype.setMaxscore = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float Percentage = 8;
 * @return {number}
 */
proto.ClientPKG.GameRoomInfo.prototype.getPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.ClientPKG.GameRoomInfo.prototype.setPercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


goog.object.extend(exports, proto.ClientPKG);
