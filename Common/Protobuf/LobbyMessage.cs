// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LobbyMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ClientPKG {

  /// <summary>Holder for reflection information generated from LobbyMessage.proto</summary>
  public static partial class LobbyMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for LobbyMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LobbyMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJMb2JieU1lc3NhZ2UucHJvdG8SCUNsaWVudFBLRxoPTWVzc2FnZUlELnBy",
            "b3RvIh4KC0dhbWVWZXJzaW9uEg8KB1ZlcnNpb24YASABKAUiXAoOR2F0ZVNl",
            "cnZlckluZm8SEAoIU2VydmVySUQYASABKAkSEAoIU2VydmVySVAYAiABKAkS",
            "EgoKU2VydmVyUG9ydBgDIAEoBRISCgpTZXJ2ZXJMb2FkGAQgASgCIj8KDkdh",
            "dGVTZXJ2ZXJMaXN0Ei0KClNlcnZlckxpc3QYASADKAsyGS5DbGllbnRQS0cu",
            "R2F0ZVNlcnZlckluZm8iZQoJR2FtZUVycm9yEiEKCUVycm9yQ29kZRgBIAEo",
            "DjIOLkdhbWVFcnJvckNvZGUSEQoJRXJyb3JJbmZvGAIgASgJEg4KBlVzZXJJ",
            "RBgDIAEoBBISCgpEZXZpY2VDb2RlGAQgASgJIogBCglMb2dpbkdhbWUSDwoH",
            "VmVyc2lvbhgBIAEoBRISCgpEZXZpY2VDb2RlGAIgASgJEhEKCUxvZ2luVHlw",
            "ZRgDIAEoBRITCgtBY2Nlc3NUb2tlbhgEIAEoCRIOCgZVc2VySUQYBSABKAQS",
            "EAoIQ2xpZW50SVAYBiABKAkSDAoEUG9ydBgJIAEoBSJ4CgtBY2NvdW50SW5m",
            "bxIOCgZVc2VySUQYASABKAQSEgoKRGV2aWNlQ29kZRgCIAEoCRITCgtBY2Nl",
            "c3NUb2tlbhgDIAEoCRIQCghVc2VyTmFtZRgEIAEoCRINCgVTY29yZRgFIAEo",
            "BBIPCgdEaWFtb25kGAYgASgEIjkKCEpvaW5HYW1lEg4KBlVzZXJJRBgBIAEo",
            "BBINCgVUb2tlbhgCIAEoCRIOCgZHYW1lSUQYAyABKAQicgoKQ3JlYXRlR2Ft",
            "ZRIOCgZVc2VySUQYASABKAQSDQoFVG9rZW4YAiABKAkSEAoIR2FtZU5hbWUY",
            "AyABKAkSEAoITWluU2NvcmUYBCABKAQSEAoITWF4U2NvcmUYBSABKAQSDwoH",
            "UHJpdmF0ZRgGIAEoCCK5AQoMR2FtZVVzZXJJbmZvEg4KBlVzZXJJRBgBIAEo",
            "BBIQCghVc2VyTmFtZRgCIAEoCRITCgtTaXRQb3NpdGlvbhgDIAEoBRIRCglV",
            "c2VyU2NvcmUYBCABKAQSEQoJRGVza1Njb3JlGAUgASgEEiEKCUdhbWVTdGF0",
            "ZRgGIAEoDjIOLlVzZXJHYW1lU3RhdGUSDwoHSGVhZFVybBgHIAEoCRIKCgJJ",
            "UBgIIAEoCRIMCgRQb3J0GAkgASgFIsMBCgxHYW1lUm9vbUluZm8SDgoGR2Ft",
            "ZUlEGAEgASgEEhAKCEdhbWVOYW1lGAIgASgJEikKCFVzZXJMaXN0GAMgAygL",
            "MhcuQ2xpZW50UEtHLkdhbWVVc2VySW5mbxIMCgREUG9zGAQgASgFEiAKDEN1",
            "cnJlbnRTdGF0ZRgFIAEoDjIKLkdhbWVTdGF0ZRIQCghNaW5TY29yZRgGIAEo",
            "BBIQCghNYXhTY29yZRgHIAEoBBISCgpQZXJjZW50YWdlGAggASgCYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MessageIDReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.GameVersion), global::ClientPKG.GameVersion.Parser, new[]{ "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.GateServerInfo), global::ClientPKG.GateServerInfo.Parser, new[]{ "ServerID", "ServerIP", "ServerPort", "ServerLoad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.GateServerList), global::ClientPKG.GateServerList.Parser, new[]{ "ServerList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.GameError), global::ClientPKG.GameError.Parser, new[]{ "ErrorCode", "ErrorInfo", "UserID", "DeviceCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.LoginGame), global::ClientPKG.LoginGame.Parser, new[]{ "Version", "DeviceCode", "LoginType", "AccessToken", "UserID", "ClientIP", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.AccountInfo), global::ClientPKG.AccountInfo.Parser, new[]{ "UserID", "DeviceCode", "AccessToken", "UserName", "Score", "Diamond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.JoinGame), global::ClientPKG.JoinGame.Parser, new[]{ "UserID", "Token", "GameID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.CreateGame), global::ClientPKG.CreateGame.Parser, new[]{ "UserID", "Token", "GameName", "MinScore", "MaxScore", "Private" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.GameUserInfo), global::ClientPKG.GameUserInfo.Parser, new[]{ "UserID", "UserName", "SitPosition", "UserScore", "DeskScore", "GameState", "HeadUrl", "IP", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ClientPKG.GameRoomInfo), global::ClientPKG.GameRoomInfo.Parser, new[]{ "GameID", "GameName", "UserList", "DPos", "CurrentState", "MinScore", "MaxScore", "Percentage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///游戏版本信息
  /// </summary>
  public sealed partial class GameVersion : pb::IMessage<GameVersion> {
    private static readonly pb::MessageParser<GameVersion> _parser = new pb::MessageParser<GameVersion>(() => new GameVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameVersion(GameVersion other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameVersion Clone() {
      return new GameVersion(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameVersion other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///网关服务器信息
  /// </summary>
  public sealed partial class GateServerInfo : pb::IMessage<GateServerInfo> {
    private static readonly pb::MessageParser<GateServerInfo> _parser = new pb::MessageParser<GateServerInfo>(() => new GateServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GateServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerInfo(GateServerInfo other) : this() {
      serverID_ = other.serverID_;
      serverIP_ = other.serverIP_;
      serverPort_ = other.serverPort_;
      serverLoad_ = other.serverLoad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerInfo Clone() {
      return new GateServerInfo(this);
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 1;
    private string serverID_ = "";
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerID {
      get { return serverID_; }
      set {
        serverID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerIP" field.</summary>
    public const int ServerIPFieldNumber = 2;
    private string serverIP_ = "";
    /// <summary>
    ///服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIP {
      get { return serverIP_; }
      set {
        serverIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerPort" field.</summary>
    public const int ServerPortFieldNumber = 3;
    private int serverPort_;
    /// <summary>
    ///服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = value;
      }
    }

    /// <summary>Field number for the "ServerLoad" field.</summary>
    public const int ServerLoadFieldNumber = 4;
    private float serverLoad_;
    /// <summary>
    ///服务器负载
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerLoad {
      get { return serverLoad_; }
      set {
        serverLoad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GateServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GateServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerID != other.ServerID) return false;
      if (ServerIP != other.ServerIP) return false;
      if (ServerPort != other.ServerPort) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ServerLoad, other.ServerLoad)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerID.Length != 0) hash ^= ServerID.GetHashCode();
      if (ServerIP.Length != 0) hash ^= ServerIP.GetHashCode();
      if (ServerPort != 0) hash ^= ServerPort.GetHashCode();
      if (ServerLoad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ServerLoad);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServerID);
      }
      if (ServerIP.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerIP);
      }
      if (ServerPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerPort);
      }
      if (ServerLoad != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ServerLoad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerID);
      }
      if (ServerIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIP);
      }
      if (ServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerPort);
      }
      if (ServerLoad != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GateServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ServerID.Length != 0) {
        ServerID = other.ServerID;
      }
      if (other.ServerIP.Length != 0) {
        ServerIP = other.ServerIP;
      }
      if (other.ServerPort != 0) {
        ServerPort = other.ServerPort;
      }
      if (other.ServerLoad != 0F) {
        ServerLoad = other.ServerLoad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServerID = input.ReadString();
            break;
          }
          case 18: {
            ServerIP = input.ReadString();
            break;
          }
          case 24: {
            ServerPort = input.ReadInt32();
            break;
          }
          case 37: {
            ServerLoad = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GateServerList : pb::IMessage<GateServerList> {
    private static readonly pb::MessageParser<GateServerList> _parser = new pb::MessageParser<GateServerList>(() => new GateServerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GateServerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerList(GateServerList other) : this() {
      serverList_ = other.serverList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerList Clone() {
      return new GateServerList(this);
    }

    /// <summary>Field number for the "ServerList" field.</summary>
    public const int ServerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ClientPKG.GateServerInfo> _repeated_serverList_codec
        = pb::FieldCodec.ForMessage(10, global::ClientPKG.GateServerInfo.Parser);
    private readonly pbc::RepeatedField<global::ClientPKG.GateServerInfo> serverList_ = new pbc::RepeatedField<global::ClientPKG.GateServerInfo>();
    /// <summary>
    ///网关服务器列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClientPKG.GateServerInfo> ServerList {
      get { return serverList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GateServerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GateServerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!serverList_.Equals(other.serverList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= serverList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      serverList_.WriteTo(output, _repeated_serverList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += serverList_.CalculateSize(_repeated_serverList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GateServerList other) {
      if (other == null) {
        return;
      }
      serverList_.Add(other.serverList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            serverList_.AddEntriesFrom(input, _repeated_serverList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameError : pb::IMessage<GameError> {
    private static readonly pb::MessageParser<GameError> _parser = new pb::MessageParser<GameError>(() => new GameError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameError(GameError other) : this() {
      errorCode_ = other.errorCode_;
      errorInfo_ = other.errorInfo_;
      userID_ = other.userID_;
      deviceCode_ = other.deviceCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameError Clone() {
      return new GameError(this);
    }

    /// <summary>Field number for the "ErrorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private global::GameErrorCode errorCode_ = 0;
    /// <summary>
    ///错误代码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "ErrorInfo" field.</summary>
    public const int ErrorInfoFieldNumber = 2;
    private string errorInfo_ = "";
    /// <summary>
    ///错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorInfo {
      get { return errorInfo_; }
      set {
        errorInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private ulong userID_;
    /// <summary>
    ///登录后的用户数据出错时使用用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "DeviceCode" field.</summary>
    public const int DeviceCodeFieldNumber = 4;
    private string deviceCode_ = "";
    /// <summary>
    ///未登录用户封包到达游戏服务器时用设备码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceCode {
      get { return deviceCode_; }
      set {
        deviceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (ErrorInfo != other.ErrorInfo) return false;
      if (UserID != other.UserID) return false;
      if (DeviceCode != other.DeviceCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (ErrorInfo.Length != 0) hash ^= ErrorInfo.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (DeviceCode.Length != 0) hash ^= DeviceCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrorCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrorCode);
      }
      if (ErrorInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorInfo);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserID);
      }
      if (DeviceCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (ErrorInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorInfo);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (DeviceCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameError other) {
      if (other == null) {
        return;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.ErrorInfo.Length != 0) {
        ErrorInfo = other.ErrorInfo;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.DeviceCode.Length != 0) {
        DeviceCode = other.DeviceCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            errorCode_ = (global::GameErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            ErrorInfo = input.ReadString();
            break;
          }
          case 24: {
            UserID = input.ReadUInt64();
            break;
          }
          case 34: {
            DeviceCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginGame : pb::IMessage<LoginGame> {
    private static readonly pb::MessageParser<LoginGame> _parser = new pb::MessageParser<LoginGame>(() => new LoginGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginGame(LoginGame other) : this() {
      version_ = other.version_;
      deviceCode_ = other.deviceCode_;
      loginType_ = other.loginType_;
      accessToken_ = other.accessToken_;
      userID_ = other.userID_;
      clientIP_ = other.clientIP_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginGame Clone() {
      return new LoginGame(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "DeviceCode" field.</summary>
    public const int DeviceCodeFieldNumber = 2;
    private string deviceCode_ = "";
    /// <summary>
    ///设备码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceCode {
      get { return deviceCode_; }
      set {
        deviceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginType" field.</summary>
    public const int LoginTypeFieldNumber = 3;
    private int loginType_;
    /// <summary>
    ///登录方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginType {
      get { return loginType_; }
      set {
        loginType_ = value;
      }
    }

    /// <summary>Field number for the "AccessToken" field.</summary>
    public const int AccessTokenFieldNumber = 4;
    private string accessToken_ = "";
    /// <summary>
    ///Token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 5;
    private ulong userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "ClientIP" field.</summary>
    public const int ClientIPFieldNumber = 6;
    private string clientIP_ = "";
    /// <summary>
    ///登录时的IP地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientIP {
      get { return clientIP_; }
      set {
        clientIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 9;
    private int port_;
    /// <summary>
    ///端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (DeviceCode != other.DeviceCode) return false;
      if (LoginType != other.LoginType) return false;
      if (AccessToken != other.AccessToken) return false;
      if (UserID != other.UserID) return false;
      if (ClientIP != other.ClientIP) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (DeviceCode.Length != 0) hash ^= DeviceCode.GetHashCode();
      if (LoginType != 0) hash ^= LoginType.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (ClientIP.Length != 0) hash ^= ClientIP.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (DeviceCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceCode);
      }
      if (LoginType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LoginType);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AccessToken);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UserID);
      }
      if (ClientIP.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClientIP);
      }
      if (Port != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (DeviceCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceCode);
      }
      if (LoginType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginType);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (ClientIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientIP);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginGame other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.DeviceCode.Length != 0) {
        DeviceCode = other.DeviceCode;
      }
      if (other.LoginType != 0) {
        LoginType = other.LoginType;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.ClientIP.Length != 0) {
        ClientIP = other.ClientIP;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            DeviceCode = input.ReadString();
            break;
          }
          case 24: {
            LoginType = input.ReadInt32();
            break;
          }
          case 34: {
            AccessToken = input.ReadString();
            break;
          }
          case 40: {
            UserID = input.ReadUInt64();
            break;
          }
          case 50: {
            ClientIP = input.ReadString();
            break;
          }
          case 72: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountInfo : pb::IMessage<AccountInfo> {
    private static readonly pb::MessageParser<AccountInfo> _parser = new pb::MessageParser<AccountInfo>(() => new AccountInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountInfo(AccountInfo other) : this() {
      userID_ = other.userID_;
      deviceCode_ = other.deviceCode_;
      accessToken_ = other.accessToken_;
      userName_ = other.userName_;
      score_ = other.score_;
      diamond_ = other.diamond_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountInfo Clone() {
      return new AccountInfo(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private ulong userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "DeviceCode" field.</summary>
    public const int DeviceCodeFieldNumber = 2;
    private string deviceCode_ = "";
    /// <summary>
    ///设备码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceCode {
      get { return deviceCode_; }
      set {
        deviceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccessToken" field.</summary>
    public const int AccessTokenFieldNumber = 3;
    private string accessToken_ = "";
    /// <summary>
    ///Token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 5;
    private ulong score_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "Diamond" field.</summary>
    public const int DiamondFieldNumber = 6;
    private ulong diamond_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (DeviceCode != other.DeviceCode) return false;
      if (AccessToken != other.AccessToken) return false;
      if (UserName != other.UserName) return false;
      if (Score != other.Score) return false;
      if (Diamond != other.Diamond) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (DeviceCode.Length != 0) hash ^= DeviceCode.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Score != 0UL) hash ^= Score.GetHashCode();
      if (Diamond != 0UL) hash ^= Diamond.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserID);
      }
      if (DeviceCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceCode);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccessToken);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (Score != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Score);
      }
      if (Diamond != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Diamond);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (DeviceCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceCode);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Score != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
      }
      if (Diamond != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diamond);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.DeviceCode.Length != 0) {
        DeviceCode = other.DeviceCode;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Score != 0UL) {
        Score = other.Score;
      }
      if (other.Diamond != 0UL) {
        Diamond = other.Diamond;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadUInt64();
            break;
          }
          case 18: {
            DeviceCode = input.ReadString();
            break;
          }
          case 26: {
            AccessToken = input.ReadString();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 40: {
            Score = input.ReadUInt64();
            break;
          }
          case 48: {
            Diamond = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinGame : pb::IMessage<JoinGame> {
    private static readonly pb::MessageParser<JoinGame> _parser = new pb::MessageParser<JoinGame>(() => new JoinGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGame(JoinGame other) : this() {
      userID_ = other.userID_;
      token_ = other.token_;
      gameID_ = other.gameID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGame Clone() {
      return new JoinGame(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private ulong userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    ///Token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameID" field.</summary>
    public const int GameIDFieldNumber = 3;
    private ulong gameID_;
    /// <summary>
    ///要加入的游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Token != other.Token) return false;
      if (GameID != other.GameID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (GameID != 0UL) hash ^= GameID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserID);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (GameID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GameID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (GameID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGame other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.GameID != 0UL) {
        GameID = other.GameID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadUInt64();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            GameID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateGame : pb::IMessage<CreateGame> {
    private static readonly pb::MessageParser<CreateGame> _parser = new pb::MessageParser<CreateGame>(() => new CreateGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGame(CreateGame other) : this() {
      userID_ = other.userID_;
      token_ = other.token_;
      gameName_ = other.gameName_;
      minScore_ = other.minScore_;
      maxScore_ = other.maxScore_;
      private_ = other.private_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGame Clone() {
      return new CreateGame(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private ulong userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    ///Token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameName" field.</summary>
    public const int GameNameFieldNumber = 3;
    private string gameName_ = "";
    /// <summary>
    ///游戏名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MinScore" field.</summary>
    public const int MinScoreFieldNumber = 4;
    private ulong minScore_;
    /// <summary>
    ///最小金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinScore {
      get { return minScore_; }
      set {
        minScore_ = value;
      }
    }

    /// <summary>Field number for the "MaxScore" field.</summary>
    public const int MaxScoreFieldNumber = 5;
    private ulong maxScore_;
    /// <summary>
    ///最大金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "Private" field.</summary>
    public const int PrivateFieldNumber = 6;
    private bool private_;
    /// <summary>
    ///是否私人游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Token != other.Token) return false;
      if (GameName != other.GameName) return false;
      if (MinScore != other.MinScore) return false;
      if (MaxScore != other.MaxScore) return false;
      if (Private != other.Private) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (MinScore != 0UL) hash ^= MinScore.GetHashCode();
      if (MaxScore != 0UL) hash ^= MaxScore.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserID);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameName);
      }
      if (MinScore != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MinScore);
      }
      if (MaxScore != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxScore);
      }
      if (Private != false) {
        output.WriteRawTag(48);
        output.WriteBool(Private);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (MinScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinScore);
      }
      if (MaxScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxScore);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateGame other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.MinScore != 0UL) {
        MinScore = other.MinScore;
      }
      if (other.MaxScore != 0UL) {
        MaxScore = other.MaxScore;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadUInt64();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            GameName = input.ReadString();
            break;
          }
          case 32: {
            MinScore = input.ReadUInt64();
            break;
          }
          case 40: {
            MaxScore = input.ReadUInt64();
            break;
          }
          case 48: {
            Private = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameUserInfo : pb::IMessage<GameUserInfo> {
    private static readonly pb::MessageParser<GameUserInfo> _parser = new pb::MessageParser<GameUserInfo>(() => new GameUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameUserInfo(GameUserInfo other) : this() {
      userID_ = other.userID_;
      userName_ = other.userName_;
      sitPosition_ = other.sitPosition_;
      userScore_ = other.userScore_;
      deskScore_ = other.deskScore_;
      gameState_ = other.gameState_;
      headUrl_ = other.headUrl_;
      iP_ = other.iP_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameUserInfo Clone() {
      return new GameUserInfo(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private ulong userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///用户昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SitPosition" field.</summary>
    public const int SitPositionFieldNumber = 3;
    private int sitPosition_;
    /// <summary>
    ///所在位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SitPosition {
      get { return sitPosition_; }
      set {
        sitPosition_ = value;
      }
    }

    /// <summary>Field number for the "UserScore" field.</summary>
    public const int UserScoreFieldNumber = 4;
    private ulong userScore_;
    /// <summary>
    ///玩家的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserScore {
      get { return userScore_; }
      set {
        userScore_ = value;
      }
    }

    /// <summary>Field number for the "DeskScore" field.</summary>
    public const int DeskScoreFieldNumber = 5;
    private ulong deskScore_;
    /// <summary>
    ///当前玩家已下注金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeskScore {
      get { return deskScore_; }
      set {
        deskScore_ = value;
      }
    }

    /// <summary>Field number for the "GameState" field.</summary>
    public const int GameStateFieldNumber = 6;
    private global::UserGameState gameState_ = 0;
    /// <summary>
    ///当前游戏状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserGameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "HeadUrl" field.</summary>
    public const int HeadUrlFieldNumber = 7;
    private string headUrl_ = "";
    /// <summary>
    ///头像地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadUrl {
      get { return headUrl_; }
      set {
        headUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 8;
    private string iP_ = "";
    /// <summary>
    ///IP地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 9;
    private int port_;
    /// <summary>
    ///端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (UserName != other.UserName) return false;
      if (SitPosition != other.SitPosition) return false;
      if (UserScore != other.UserScore) return false;
      if (DeskScore != other.DeskScore) return false;
      if (GameState != other.GameState) return false;
      if (HeadUrl != other.HeadUrl) return false;
      if (IP != other.IP) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (SitPosition != 0) hash ^= SitPosition.GetHashCode();
      if (UserScore != 0UL) hash ^= UserScore.GetHashCode();
      if (DeskScore != 0UL) hash ^= DeskScore.GetHashCode();
      if (GameState != 0) hash ^= GameState.GetHashCode();
      if (HeadUrl.Length != 0) hash ^= HeadUrl.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (SitPosition != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SitPosition);
      }
      if (UserScore != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UserScore);
      }
      if (DeskScore != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(DeskScore);
      }
      if (GameState != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) GameState);
      }
      if (HeadUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HeadUrl);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IP);
      }
      if (Port != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (SitPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SitPosition);
      }
      if (UserScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserScore);
      }
      if (DeskScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeskScore);
      }
      if (GameState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      if (HeadUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadUrl);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.SitPosition != 0) {
        SitPosition = other.SitPosition;
      }
      if (other.UserScore != 0UL) {
        UserScore = other.UserScore;
      }
      if (other.DeskScore != 0UL) {
        DeskScore = other.DeskScore;
      }
      if (other.GameState != 0) {
        GameState = other.GameState;
      }
      if (other.HeadUrl.Length != 0) {
        HeadUrl = other.HeadUrl;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadUInt64();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 24: {
            SitPosition = input.ReadInt32();
            break;
          }
          case 32: {
            UserScore = input.ReadUInt64();
            break;
          }
          case 40: {
            DeskScore = input.ReadUInt64();
            break;
          }
          case 48: {
            gameState_ = (global::UserGameState) input.ReadEnum();
            break;
          }
          case 58: {
            HeadUrl = input.ReadString();
            break;
          }
          case 66: {
            IP = input.ReadString();
            break;
          }
          case 72: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameRoomInfo : pb::IMessage<GameRoomInfo> {
    private static readonly pb::MessageParser<GameRoomInfo> _parser = new pb::MessageParser<GameRoomInfo>(() => new GameRoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ClientPKG.LobbyMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRoomInfo(GameRoomInfo other) : this() {
      gameID_ = other.gameID_;
      gameName_ = other.gameName_;
      userList_ = other.userList_.Clone();
      dPos_ = other.dPos_;
      currentState_ = other.currentState_;
      minScore_ = other.minScore_;
      maxScore_ = other.maxScore_;
      percentage_ = other.percentage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRoomInfo Clone() {
      return new GameRoomInfo(this);
    }

    /// <summary>Field number for the "GameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private ulong gameID_;
    /// <summary>
    ///GameID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "GameName" field.</summary>
    public const int GameNameFieldNumber = 2;
    private string gameName_ = "";
    /// <summary>
    ///游戏名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserList" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ClientPKG.GameUserInfo> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::ClientPKG.GameUserInfo.Parser);
    private readonly pbc::RepeatedField<global::ClientPKG.GameUserInfo> userList_ = new pbc::RepeatedField<global::ClientPKG.GameUserInfo>();
    /// <summary>
    ///玩家列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ClientPKG.GameUserInfo> UserList {
      get { return userList_; }
    }

    /// <summary>Field number for the "DPos" field.</summary>
    public const int DPosFieldNumber = 4;
    private int dPos_;
    /// <summary>
    ///D玩家位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DPos {
      get { return dPos_; }
      set {
        dPos_ = value;
      }
    }

    /// <summary>Field number for the "CurrentState" field.</summary>
    public const int CurrentStateFieldNumber = 5;
    private global::GameState currentState_ = 0;
    /// <summary>
    ///当前游戏状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameState CurrentState {
      get { return currentState_; }
      set {
        currentState_ = value;
      }
    }

    /// <summary>Field number for the "MinScore" field.</summary>
    public const int MinScoreFieldNumber = 6;
    private ulong minScore_;
    /// <summary>
    ///最小金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinScore {
      get { return minScore_; }
      set {
        minScore_ = value;
      }
    }

    /// <summary>Field number for the "MaxScore" field.</summary>
    public const int MaxScoreFieldNumber = 7;
    private ulong maxScore_;
    /// <summary>
    ///最大金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "Percentage" field.</summary>
    public const int PercentageFieldNumber = 8;
    private float percentage_;
    /// <summary>
    ///房间抽水比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Percentage {
      get { return percentage_; }
      set {
        percentage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (GameName != other.GameName) return false;
      if(!userList_.Equals(other.userList_)) return false;
      if (DPos != other.DPos) return false;
      if (CurrentState != other.CurrentState) return false;
      if (MinScore != other.MinScore) return false;
      if (MaxScore != other.MaxScore) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Percentage, other.Percentage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0UL) hash ^= GameID.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      hash ^= userList_.GetHashCode();
      if (DPos != 0) hash ^= DPos.GetHashCode();
      if (CurrentState != 0) hash ^= CurrentState.GetHashCode();
      if (MinScore != 0UL) hash ^= MinScore.GetHashCode();
      if (MaxScore != 0UL) hash ^= MaxScore.GetHashCode();
      if (Percentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Percentage);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(GameID);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameName);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      if (DPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DPos);
      }
      if (CurrentState != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) CurrentState);
      }
      if (MinScore != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MinScore);
      }
      if (MaxScore != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MaxScore);
      }
      if (Percentage != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Percentage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameID);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      if (DPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DPos);
      }
      if (CurrentState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrentState);
      }
      if (MinScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinScore);
      }
      if (MaxScore != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxScore);
      }
      if (Percentage != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0UL) {
        GameID = other.GameID;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      userList_.Add(other.userList_);
      if (other.DPos != 0) {
        DPos = other.DPos;
      }
      if (other.CurrentState != 0) {
        CurrentState = other.CurrentState;
      }
      if (other.MinScore != 0UL) {
        MinScore = other.MinScore;
      }
      if (other.MaxScore != 0UL) {
        MaxScore = other.MaxScore;
      }
      if (other.Percentage != 0F) {
        Percentage = other.Percentage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameID = input.ReadUInt64();
            break;
          }
          case 18: {
            GameName = input.ReadString();
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
          case 32: {
            DPos = input.ReadInt32();
            break;
          }
          case 40: {
            currentState_ = (global::GameState) input.ReadEnum();
            break;
          }
          case 48: {
            MinScore = input.ReadUInt64();
            break;
          }
          case 56: {
            MaxScore = input.ReadUInt64();
            break;
          }
          case 69: {
            Percentage = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
